/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "secrets.dtsi"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt { tapping-term-ms = <200>; };

&gresc { keep-mods = <(MOD_LSFT|MOD_RSFT)>; };

/ {
    behaviors {
        hm: homerow_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "HM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        hml: homerow-left {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <50 51 52 53 54 55 43 44 30 18 6 31 19 7 8 9 10 11 35 22 23 49 48 34 47 57 56 45 46 32 33 21 20 41 40 39 38 37 36>;
            hold-trigger-on-release;
        };

        hmr: homerow-right {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42 50 51 52 53 54 55 56 57>;
            hold-trigger-on-release;
        };

        tldesc: tilde_esc {
            compatible = "zmk,behavior-mod-morph";
            label = "TLDESC";
            bindings = <&kp ESC>, <&kp TILDE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lbr: lbr {
            compatible = "zmk,behavior-mod-morph";
            label = "LBR";
            bindings = <&kp LEFT_BRACKET>, <&kp LEFT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        rbr: rbr {
            compatible = "zmk,behavior-mod-morph";
            label = "RBR";
            bindings = <&kp RIGHT_BRACKET>, <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        btquote: btquote {
            compatible = "zmk,behavior-mod-morph";
            label = "BTQUOTE";
            bindings = <&kp SINGLE_QUOTE>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        dotcom: dotcom {
            compatible = "zmk,behavior-mod-morph";
            label = "DOTCOM";
            bindings = <&kp PERIOD>, <&kp COMMA>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        CO_CFG {
            bindings = <&mo 7>;
            key-positions = <56 61 41 40>;
            timeout-ms = <100>;
            slow-release;
        };

        CO_ESC {
            bindings = <&kp ESCAPE>;
            key-positions = <31 32>;
        };
    };

    macros {
        m_pass1: m_pass1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(N) &kp LS(O) &kp LS(N) &kp LS(E)>;
            label = "M_PASS1";
            wait-ms = <10>;
            tap-ms = <15>;
        };

        m_pass2: m_pass2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(N) &kp LS(O) &kp LS(N) &kp LS(E)>;
            label = "M_PASS2";
        };

        m_zoom: m_zoom {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp FSLH &kp Z &kp O &kp O &kp M &kp SPACE &kp J &kp O &kp I &kp N &kp SPACE &kp M &kp E>;
            label = "M_ZOOM";
        };

        pdir: pdir {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp DOT &kp FSLH>;
            label = "PDIR";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            label = "Base";
            bindings = <
&kp TAB    &kp Q        &kp W            &kp F            &kp P                  &kp B          &kp J        &kp L               &kp U             &kp Y            &kp SEMICOLON         &kp BACKSLASH
&kp ESC    &mt LCTRL A  &hml LEFT_ALT R  &hml LEFT_GUI S  &hml LEFT_SHIFT T      &kp G          &kp M        &hmr RIGHT_SHIFT N  &hmr RIGHT_GUI E  &hmr LEFT_ALT I  &hmr RIGHT_CONTROL O  &kp SQT
&kp LSHFT  &lt 5 Z      &kp X            &kp C            &kp D                  &kp V          &kp K        &kp H               &kp COMMA         &kp DOT          &kp FSLH              &kp RSHFT
                                         &mo 5            &hmr LEFT_COMMAND TAB  &lt 3 ENTER    &lt 1 SPACE  &lt 4 BACKSPACE     &kp RIGHT_GUI
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        Symbols {
            bindings = <
&trans  &btquote                &kp LS(LT)           &kp LS(GT)          &kp LS(DQT)            &dotcom     &kp LS(AMPS)  &kp SEMI               &kp LBKT                        &kp RBKT                         &kp LS(PRCNT)             &trans
&trans  &hml LCTRL EXCLAMATION  &hml LEFT_ALT MINUS  &hml LEFT_GUI PLUS  &hml LEFT_SHIFT EQUAL  &kp HASH    &kp PIPE      &hmr LEFT_SHIFT COLON  &hmr LEFT_GUI LEFT_PARENTHESIS  &hmr LEFT_ALT RIGHT_PARENTHESIS  &hmr LEFT_SHIFT QUESTION  &trans
&trans  &kp LS(CARET)           &kp FSLH             &kp LS(STAR)        &kp BSLH               &pdir       &kp TILDE     &kp LS(DLLR)           &kp LS(LBRC)                    &kp LS(RBRC)                     &kp LS(AT)                &trans
                                                     &trans              &trans                 &mo 2       &trans        &trans                 &trans
            >;

            label = "sym/num";
        };

        num {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp N7  &kp N8  &kp N9  &kp LS(STAR)  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp N4  &kp N5  &kp N6  &kp LS(PLUS)  &kp MINUS
&trans  &trans  &trans  &trans  &trans  &trans    &kp N0  &kp N1  &kp N2  &kp N3  &kp FSLH      &kp EQUAL
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "num";
        };

        Nav {
            bindings = <
&trans  &trans             &trans                &trans                &trans                        &kp K_MUTE         &kp PG_UP  &kp HOME         &kp UP  &kp END    &trans             &trans
&trans  &hml LCTRL C_PREV  &hml LEFT_ALT C_NEXT  &hml LEFT_GUI C_STOP  &hml LEFT_SHIFT C_PLAY_PAUSE  &kp C_VOLUME_UP    &kp PG_DN  &kp LEFT         &kp UP  &kp RIGHT  &kp K_APPLICATION  &kp ENTER
&trans  &trans             &trans                &kp K_COPY            &kp K_PASTE                   &kp C_VOL_DN       &trans     &trans           &trans  &trans     &trans             &trans
                                                 &trans                &trans                        &trans             &trans     &lt 7 BACKSPACE  &trans
            >;

            label = "Nav";
        };

        sys {
            bindings = <
&bootloader   &kp LG(LC(N1))  &kp LG(LC(N2))  &kp LG(LC(N3))  &kp LG(LC(N4))  &kp LG(LC(N5))    &kp LG(LC(N6))  &kp LG(LC(N7))  &kp LG(LC(N8))  &kp LG(LC(N9))  &kp LG(LC(N0))  &bootloader
&caps_word    &m_pass1        &m_pass2        &trans          &trans          &to 6             &trans          &trans          &trans          &kp K_LOCK      &trans          &trans
&kp CAPSLOCK  &m_zoom         &trans          &trans          &trans          &to 0             &trans          &trans          &trans          &trans          &trans          &trans
                                              &trans          &trans          &trans            &trans          &trans          &trans
            >;

            label = "sys";
        };

        func {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp F1   &kp F2   &kp F3   &kp F4   &kp F5   &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp F6   &kp F7   &kp F8   &kp F9   &kp F10  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp F11  &kp F12  &kp F13  &kp F14  &kp F15  &trans
                        &trans  &trans  &trans    &trans   &trans   &trans
            >;

            label = "func";
        };

        game {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R        &kp T        &kp Y      &kp U        &kp I      &kp O    &kp P     &kp BSLH
&kp LCTRL  &kp A  &kp S  &kp D     &kp F        &kp G        &kp H      &kp J        &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V        &kp B        &kp N      &kp M        &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                         &kp LGUI  &key_repeat  &kp SPACE    &kp SPACE  &key_repeat  &kp RGUI
            >;

            label = "game";
        };

        cfg {
            bindings = <
&trans  &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4     &to 0        &to 6   &trans  &trans        &trans  &trans
&trans  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4    &trans       &trans  &trans  &out OUT_TOG  &trans  &trans
&trans  &trans         &bt BT_CLR     &trans         &trans         &bootloader      &bootloader  &trans  &trans  &trans        &trans  &trans
                                      &trans         &trans         &trans           &trans       &trans  &trans
            >;

            label = "cfg";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};

// THIS WILL Be a defined makro when compiled with secrets, or empty when no secrets are in play

INJECT_SECRETS()

//                 default_layer {
// // -----------------------------------------------------------------------------------------
// // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
// //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
//                         label = "Base";
//                         bindings = <
//    &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
//    &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
//    &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp ESC
//                   &kp LGUI &mo 1 &kp SPACE   &kp RET &mo 2 &kp RALT
//                         >;
//                 };
